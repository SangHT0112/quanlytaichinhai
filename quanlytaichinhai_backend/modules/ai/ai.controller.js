// import { openai } from "./openai.js"
import { toolHandlers } from "./ai.toolHandlers.js"
import { saveFeedback } from './ai.model.js'
import { addTransaction } from "../transaction/transaction.model.js"
import { getCategoryIdByKeyword } from "../category/category.model.js"
import { format } from "date-fns"
import fetch from 'node-fetch'
import fs from 'fs'
import { fileURLToPath } from 'url'
import path from 'path'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)


export const classifyMessage = async (req, res) => {
  const user_input = req.body.message || ""

  const promptPath = path.join(__dirname, 'documents', 'ai_prompt_classify.txt')
  const basePrompt = fs.readFileSync(promptPath, 'utf-8')
  const fullPrompt = basePrompt.replace("${user_input}", user_input)

  try {
    const ollamaRes = await fetch("http://localhost:11434/api/generate", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        model: "llama3",
        prompt: fullPrompt,
        stream: false
      })
    })

    const data = await ollamaRes.json()
    const rawResponse = data.response?.trim().toLowerCase()

    const intent = ["transaction", "component"].includes(rawResponse)
      ? rawResponse
      : "unknown"

    res.json({ intent })
  } catch (err) {
    console.error("‚ùå L·ªói ph√¢n lo·∫°i:", err)
    res.status(500).json({ intent: "unknown", error: "AI classify failed" })
  }
}
export const handleChat = async (req, res) => {
  const user_input = req.body.message || "T√¥i ti√™u 100k ƒÉn s√°ng h√¥m nay"

  try {
    const ollamaRes = await fetch("http://localhost:11434/api/generate", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        model: "llama3",
        prompt: `
          B·∫°n l√† tr·ª£ l√Ω t√†i ch√≠nh. Ch·ªâ tr·∫£ v·ªÅ JSON v·ªõi ƒë·ªãnh d·∫°ng sau:
          {
            "type": expense ho·∫∑c income
            "amount": s·ªë_ti·ªÅn,
            "category": "danh_m·ª•c",
            "date": "YYYY-MM-DD",
            "user_id": 1
          }
          type l√† expense n·∫øu li√™n quan ƒë·∫øn mua, x√†i.. income n·∫øu l√† l∆∞∆°ng, th∆∞·ªüng
          category ch·ªçn ph√π h·ª£p [L∆∞∆°ng, ƒÇn u·ªëng, Di chuy·ªÉn, Gi·∫£i tr√≠, H√≥a ƒë∆°n, Y t·∫ø, Gi√°o d·ª•c, Du l·ªãch, ]
          N·∫øu kh√¥ng hi·ªÉu, tr·∫£ v·ªÅ {"error": "Kh√¥ng hi·ªÉu"}
          date c√°c t·ª´ nh∆∞ h√¥m nay, nay... th√¨ l·∫•y gi·ªù now hi·ªán t·∫°i

          C√¢u h·ªèi: "${user_input}"
          Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng th√™m b·∫•t k·ª≥ text n√†o kh√°c!
        `,
        stream: false,
        format: "json" // Th√™m d√≤ng n√†y ƒë·ªÉ y√™u c·∫ßu tr·∫£ v·ªÅ JSON
      })
    })

    const data = await ollamaRes.json()
    let aiText = data.response?.trim() || ""

    // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p AI th√™m text th·ª´a
    const jsonStart = aiText.indexOf('{')
    const jsonEnd = aiText.lastIndexOf('}') + 1
    if (jsonStart !== -1 && jsonEnd !== -1) {
      aiText = aiText.slice(jsonStart, jsonEnd)
    }

    let structured = null
    try {
      structured = JSON.parse(aiText)
      
      // X·ª≠ l√Ω ng√†y "today"
      if (structured.date === "today") {
        structured.date = format(new Date(), 'yyyy-MM-dd')
      }
    } catch (e) {
      console.warn("‚ö†Ô∏è Parse JSON failed:", aiText)
      structured = { error: "Kh√¥ng hi·ªÉu" }
    }

    await saveFeedback({
      user_input,
      ai_suggested: structured,
      user_corrected: null,
      confirmed: null,
    })

    res.json({
      raw: aiText,
      structured,
    })
  } catch (error) {
    console.error("‚ùå Ollama error:", error)
    res.status(500).json({ error: "L·ªói AI" })
  }
}

export const handleChartRequest = async (req, res) => {
  const user_input = req.body.message || "Xem bi·ªÉu ƒë·ªì thu chi 3 th√°ng qua"
  const hintPath = path.join(__dirname, 'documents', 'component_hint.txt')
  const componentGuide = fs.readFileSync(hintPath, 'utf-8')
  try {
    const ollamaRes = await fetch("http://localhost:11434/api/generate", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        model: "llama3",
        prompt: `
              ƒê√¢y l√† t√†i li·ªáu b·∫°n c√≥ th·ªÉ h·ªçc ${componentGuide}
          B·∫°n l√† tr·ª£ l√Ω t√†i ch√≠nh. Nhi·ªám v·ª•: N·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu xem bi·ªÉu ƒë·ªì thu chi g·∫ßn ƒë√¢y ho·∫∑c m·ªôt s·ªë th√°ng c·ª• th·ªÉ,
          h√£y tr·∫£ v·ªÅ JSON d·∫°ng sau:

          [
            {
              "type": "text",
              "text": "üìà D∆∞·ªõi ƒë√¢y l√† bi·ªÉu ƒë·ªì thu chi c·ªßa b·∫°n:",
              "style": "default"
            },
            {
              "type": "component",
              "name": "MonthlyBarChart",
              "layout": "block",
              "props": {
                "initialMonths": s·ªë_th√°ng
              }
            }
          ]

          N·∫øu ng∆∞·ªùi d√πng n√≥i "th√°ng n√†y" ho·∫∑c "g·∫ßn ƒë√¢y" => s·ªë_th√°ng l√† 1 ho·∫∑c 3.
          N·∫øu n√≥i "3 th√°ng", "5 th√°ng" => l·∫•y ƒë√∫ng s·ªë ƒë√≥.

          N·∫øu kh√¥ng hi·ªÉu, tr·∫£ v·ªÅ: { "error": "Kh√¥ng hi·ªÉu" }

          Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng th√™m b·∫•t k·ª≥ vƒÉn b·∫£n n√†o kh√°c.

          C√¢u h·ªèi: "${user_input}"
        `,
        stream: false,
        format: "json"
      })
    })

    const data = await ollamaRes.json()
    let aiText = data.response?.trim() || ""

    const jsonStart = aiText.indexOf('{') !== -1 ? aiText.indexOf('{') : aiText.indexOf('[')
    const jsonEnd = aiText.lastIndexOf('}') + 1
    if (jsonStart !== -1 && jsonEnd !== -1) {
      aiText = aiText.slice(jsonStart, jsonEnd)
    }

    let structured = null
    try {
      structured = JSON.parse(aiText)
    } catch (e) {
      console.warn("‚ö†Ô∏è Parse JSON failed:", aiText)
      structured = { error: "Kh√¥ng hi·ªÉu" }
    }

    res.json({
      raw: aiText,
      structured
    })
  } catch (error) {
    console.error("‚ùå Ollama error:", error)
    res.status(500).json({ error: "L·ªói AI" })
  }
}


// ‚úÖ API x√°c nh·∫≠n ho·∫∑c ch·ªânh s·ª≠a giao d·ªãch
export const confirmTransaction = async (req, res) => {
  try {
    const { user_input, ai_suggested, user_corrected, confirmed } = req.body;

    if (!user_input || !ai_suggested) {
      return res.status(400).json({ error: "Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc" });
    }

    // L·∫•y d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n ho·∫∑c ch·ªânh s·ª≠a
    const transactionData = user_corrected || ai_suggested;

    // L·∫•y category_id t·ª´ t√™n danh m·ª•c
    console.log(`T√¨m category_id cho: "${transactionData.category}"`);
    const category_id = await getCategoryIdByKeyword(transactionData.category);
    console.log(`kq category_id: "${transactionData.category}"`);
    if (!category_id && confirmed) {
      return res.status(400).json({ 
        error: `Kh√¥ng t√¨m th·∫•y danh m·ª•c "${transactionData.category}"` 
      });
    }

    // L∆∞u feedback
    await saveFeedback({
      user_input,
      ai_suggested,
      user_corrected,
      confirmed,
    });

    // N·∫øu x√°c nh·∫≠n th√¨ l∆∞u giao d·ªãch
    if (confirmed) {
      const dbData = {
        user_id: transactionData.user_id || 1,
        amount: transactionData.amount,
        category_id,
        purpose_id: null, // C√≥ th·ªÉ th√™m logic x·ª≠ l√Ω m·ª•c ƒë√≠ch
        type: "expense", // Ho·∫∑c "income" t√πy logic
        description: user_input,
        transaction_date: transactionData.date || new Date().toISOString().split('T')[0],
      };

      await addTransaction(dbData);
    }

    res.json({ 
      success: true,
      message: confirmed 
        ? "‚úÖ ƒê√£ l∆∞u giao d·ªãch v√†o h·ªá th·ªëng" 
        : "‚ö†Ô∏è Giao d·ªãch kh√¥ng ƒë∆∞·ª£c x√°c nh·∫≠n",
      category_id // Tr·∫£ v·ªÅ ƒë·ªÉ debug n·∫øu c·∫ßn
    });
  } catch (error) {
    console.error("‚ùå L·ªói x√°c nh·∫≠n:", error);
    res.status(500).json({ error: "L·ªói server khi x·ª≠ l√Ω giao d·ªãch" });
  }
};
