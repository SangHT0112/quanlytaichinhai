import { fetchFinancialSummary } from '../../overview/overview.model.js';
import db from '../../../config/db.js';

export const generatePlanningPrompt = async ({ user_input, historyText, now, user_id }) => {
  // Kh·ªüi t·∫°o ng√†y hi·ªán t·∫°i
  const currentDate = now instanceof Date ? now : new Date();

  // L·∫•y d·ªØ li·ªáu t√†i ch√≠nh
  let financialData = { actual_balance: 0, current_income: 0, previous_income: 0, current_expense: 0, previous_expense: 0, monthly_surplus: 0, warnings: [] };
  try {
    financialData = await fetchFinancialSummary(user_id);
  } catch (error) {
    console.error('L·ªói khi l·∫•y d·ªØ li·ªáu t√†i ch√≠nh:', error);
  }

  // L·∫•y chi ti√™u theo danh m·ª•c (3 th√°ng g·∫ßn ƒë√¢y)
  let spendingByCategory = {};
  try {
    const [rows] = await db.query(`
      SELECT c.name, SUM(t.amount) as total, COUNT(*) as count
      FROM transactions t
      JOIN categories c ON t.category_id = c.category_id
      WHERE t.user_id = ? AND t.type = 'expense' 
        AND t.transaction_date >= DATE_SUB(?, INTERVAL 3 MONTH)
      GROUP BY c.name
    `, [user_id, currentDate]);
    spendingByCategory = rows.reduce((acc, row) => {
      acc[row.name] = { 
        total: Number(row.total), 
        percentage: financialData.current_expense ? (row.total / financialData.current_expense * 100).toFixed(1) : 0, 
        count: row.count 
      };
      return acc;
    }, {});
  } catch (error) {
    console.error('L·ªói khi l·∫•y chi ti√™u theo danh m·ª•c:', error);
    spendingByCategory = { 'Kh√¥ng x√°c ƒë·ªãnh': { total: financialData.current_expense, percentage: 100, count: 0 } };
  }

  // L·∫•y giao d·ªãch l·ªõn (ng∆∞·ª°ng gi·∫£m xu·ªëng 2 tri·ªáu cho thu nh·∫≠p th·∫•p)
  let largeTransactions = [];
  try {
    const [rows] = await db.query(`
      SELECT t.type, t.amount, c.name as category, t.description, t.transaction_date
      FROM transactions t
      JOIN categories c ON t.category_id = c.category_id
      WHERE t.user_id = ? AND t.amount >= 2000000
        AND t.transaction_date >= DATE_SUB(?, INTERVAL 6 MONTH)
      ORDER BY t.transaction_date DESC
      LIMIT 5
    `, [user_id, currentDate]);
    largeTransactions = rows.map(row => ({
      type: row.type,
      amount: Number(row.amount),
      category: row.category,
      description: row.description,
      transaction_date: row.transaction_date
    }));
  } catch (error) {
    console.error('L·ªói khi l·∫•y giao d·ªãch l·ªõn:', error);
  }

  // L·∫•y k·∫ø ho·∫°ch ti·∫øt ki·ªám hi·ªán t·∫°i
  let existingPlans = [];
  let hasExistingPlans = false;
  try {
    const [rows] = await db.query(`
      SELECT id, name, description, target_amount, current_amount, monthly_contribution, 
             time_to_goal, priority, category, created_at, updated_at
      FROM savings_plans
      WHERE user_id = ?
      ORDER BY created_at DESC
    `, [user_id]);
    existingPlans = rows.map(row => ({
      id: row.id,
      name: row.name,
      description: row.description,
      target_amount: Number(row.target_amount),
      current_amount: Number(row.current_amount),
      monthly_contribution: Number(row.monthly_contribution),
      time_to_goal: row.time_to_goal,
      priority: row.priority,
      category: row.category,
      created_at: row.created_at,
      updated_at: row.updated_at
    }));
    hasExistingPlans = existingPlans.length > 0;
  } catch (error) {
    console.error('L·ªói khi l·∫•y k·∫ø ho·∫°ch ti·∫øt ki·ªám:', error);
  }

  // L·∫•y danh m·ª•c t√πy ch·ªânh
  let categories = [];
  try {
    const [rows] = await db.query(`
      SELECT name, type, icon
      FROM categories
      WHERE user_id = ? OR user_id IS NULL
    `, [user_id]);
    categories = rows;
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh m·ª•c:', error);
    categories = [
      { name: 'Qu·ªπ kh·∫©n c·∫•p', type: 'savings', icon: null },
      { name: 'Du l·ªãch', type: 'savings', icon: null },
      { name: 'Mua s·∫Øm', type: 'savings', icon: null },
      { name: 'H·ªçc t·∫≠p', type: 'savings', icon: null }
    ];
  }

  // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
  let userInfo = {};
  try {
    const [rows] = await db.query(`
      SELECT username, last_active_at
      FROM users
      WHERE user_id = ?
    `, [user_id]);
    userInfo = rows[0] || { username: 'Kh√¥ng x√°c ƒë·ªãnh', last_active_at: null };
  } catch (error) {
    console.error('L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', error);
  }

  // X√°c ƒë·ªãnh current_amount
  const currentAmountForNewPlan = hasExistingPlans ? 0 : financialData.actual_balance;

  return `
B·∫°n l√† AI l·∫≠p k·∫ø ho·∫°ch t√†i ch√≠nh chuy√™n nghi·ªáp, t·∫°o JSON cho c√°c k·∫ø ho·∫°ch ti·∫øt ki·ªám d·ª±a tr√™n input ng∆∞·ªùi d√πng, d·ªØ li·ªáu t√†i ch√≠nh c√° nh√¢n, v√† b·ªëi c·∫£nh th·ªã tr∆∞·ªùng Vi·ªát Nam 2025 (ng√†y: ${currentDate.toISOString().split('T')[0]}).

üìå Input:
- C√¢u h·ªèi: "${user_input}"
- L·ªãch s·ª≠ h·ªôi tho·∫°i: "${historyText || 'Kh√¥ng c√≥ l·ªãch s·ª≠'}"
- D·ªØ li·ªáu t√†i ch√≠nh:
  - S·ªë d∆∞ th·ª±c t·∫ø: ${financialData.actual_balance} VND
  - Thu nh·∫≠p th√°ng hi·ªán t·∫°i: ${financialData.current_income} VND
  - Thu nh·∫≠p th√°ng tr∆∞·ªõc: ${financialData.previous_income} VND
  - % thay ƒë·ªïi thu nh·∫≠p: ${financialData.income_change_percentage || 0}%
  - Chi ti√™u th√°ng hi·ªán t·∫°i: ${financialData.current_expense} VND
  - Chi ti√™u th√°ng tr∆∞·ªõc: ${financialData.previous_expense} VND
  - % thay ƒë·ªïi chi ti√™u: ${financialData.expense_change_percentage || 0}%
  - Th·∫∑ng d∆∞ h√†ng th√°ng: ${financialData.monthly_surplus} VND
  - C·∫£nh b√°o: ${JSON.stringify(financialData.warnings)}
  - Chi ti√™u theo danh m·ª•c (3 th√°ng): ${JSON.stringify(spendingByCategory)}
  - Giao d·ªãch l·ªõn (6 th√°ng, ‚â•2 tri·ªáu): ${JSON.stringify(largeTransactions)}
  - K·∫ø ho·∫°ch ti·∫øt ki·ªám hi·ªán t·∫°i: ${JSON.stringify(existingPlans)}
  - ƒê√£ c√≥ k·∫ø ho·∫°ch ti·∫øt ki·ªám: ${hasExistingPlans}
  - Current amount cho k·∫ø ho·∫°ch m·ªõi: ${currentAmountForNewPlan} VND
  - Danh m·ª•c kh·∫£ d·ª•ng: ${JSON.stringify(categories)}
  - Th√¥ng tin ng∆∞·ªùi d√πng: ${userInfo.username}, l·∫ßn cu·ªëi ho·∫°t ƒë·ªông: ${userInfo.last_active_at || 'Kh√¥ng x√°c ƒë·ªãnh'}
- B·ªëi c·∫£nh th·ªã tr∆∞·ªùng (2025):
  - L√£i su·∫•t ti·∫øt ki·ªám: 3-7.5%/nƒÉm
  - L·∫°m ph√°t: 3.4-4.2%/nƒÉm
  - Gi√° ƒëi·ªán tho·∫°i: 5-20 tri·ªáu
  - Chi ph√≠ du l·ªãch n·ªôi ƒë·ªãa: 5-15 tri·ªáu/ng∆∞·ªùi
  - Chi ph√≠ h·ªçc t·∫≠p (kh√≥a h·ªçc): 2-10 tri·ªáu

üîë Nhi·ªám v·ª•:
1. **Tr√≠ch xu·∫•t t·ª´ c√¢u h·ªèi**:
   - T√™n k·∫ø ho·∫°ch (e.g., "Qu·ªπ kh·∫©n c·∫•p", "Mua ƒëi·ªán tho·∫°i", "Du l·ªãch ƒê√† L·∫°t")
   - S·ªë ti·ªÅn m·ª•c ti√™u (e.g., "10 tri·ªáu", "50 tri·ªáu")
   - Th·ªùi gian (e.g., "6 th√°ng", "2 nƒÉm")
   - Danh m·ª•c (ch·ªçn t·ª´: ${JSON.stringify(categories.map(c => c.name))})
   - ∆Øu ti√™n (suy ra: qu·ªπ kh·∫©n c·∫•p=high, h·ªçc t·∫≠p=high, du l·ªãch=medium, mua s·∫Øm=low)

2. **T√≠nh to√°n**:
   - Current amount: ${hasExistingPlans ? '0 VND (ƒë√£ c√≥ k·∫ø ho·∫°ch kh√°c)' : `${financialData.actual_balance} VND`}
   - Monthly contribution: T·ªëi ƒëa 20% current_income n·∫øu monthly_surplus < 3 tri·ªáu, t·ªëi ƒëa 50% n·∫øu monthly_surplus ‚â• 3 tri·ªáu.
   - Time to goal: N·∫øu kh√¥ng c√≥ th·ªùi gian, t√≠nh: time_to_goal = ceil((target_amount - current_amount) / monthly_contribution).
   - Milestones: 3 c·ªôt m·ªëc (25%, 50%, 100%) d·ª±a tr√™n target_amount.
   - Feasibility score:
     - D∆∞·ªõi 15% current_income: 90-100
     - 15-25% current_income: 80-90
     - Tr√™n 25% current_income: d∆∞·ªõi 80
     - Gi·∫£m 5 ƒëi·ªÉm n·∫øu monthly_surplus < 2 tri·ªáu; gi·∫£m 5 ƒëi·ªÉm n·∫øu expense_change_percentage > 15%.
     - Gi·∫£m 10 ƒëi·ªÉm n·∫øu existingPlans c√≥ k·∫ø ho·∫°ch t∆∞∆°ng t·ª± (category tr√πng).
   - Risk level: D√†i h·∫°n (>3 nƒÉm)=medium, ng·∫Øn h·∫°n (‚â§3 nƒÉm)=low. N·∫øu monthly_surplus < 1 tri·ªáu ho·∫∑c income_change_percentage < -15%, risk_level = "high".

3. **T·∫°o g·ª£i √Ω AI**:
   - Recommendations (2-3 g·ª£i √Ω):
     - N·∫øu monthly_surplus < 2 tri·ªáu, g·ª£i √Ω tƒÉng thu nh·∫≠p (freelance, b√°n h√†ng online).
     - N·∫øu spendingByCategory c√≥ danh m·ª•c >40% current_income, g·ª£i √Ω c·∫Øt gi·∫£m danh m·ª•c ƒë√≥.
     - N·∫øu existingPlans kh√¥ng r·ªóng, g·ª£i √Ω ∆∞u ti√™n ho·∫∑c ƒëi·ªÅu ch·ªânh k·∫ø ho·∫°ch hi·ªán c√≥.
     - G·ª£i √Ω ti·∫øt ki·ªám nh·ªè (1-2 tri·ªáu/th√°ng) ho·∫∑c qu·ªπ kh·∫©n c·∫•p n·∫øu ch∆∞a c√≥.
   - Challenges (2-3 r·ªßi ro):
     - L·∫°m ph√°t 3.4-4.2%/nƒÉm.
     - Thu nh·∫≠p kh√¥ng ·ªïn ƒë·ªãnh n·∫øu income_change_percentage < -10%.
     - Chi ti√™u cao n·∫øu spendingByCategory c√≥ danh m·ª•c >40%.
     - N·∫øu existingPlans > 1, th√™m r·ªßi ro "Ph√¢n t√°n ngu·ªìn l·ª±c".
   - Tips (2-3 l·ªùi khuy√™n):
     - Thi·∫øt l·∫≠p chuy·ªÉn kho·∫£n t·ª± ƒë·ªông ƒë·ªÉ ti·∫øt ki·ªám.
     - Theo d√µi chi ti√™u h√†ng tu·∫ßn.
     - N·∫øu expense_change_percentage > 15%, g·ª£i √Ω c·∫Øt gi·∫£m chi ti√™u kh√¥ng c·∫ßn thi·∫øt.
     - N·∫øu ch∆∞a c√≥ qu·ªπ kh·∫©n c·∫•p, khuy√™n ∆∞u ti√™n ti·∫øt ki·ªám 6-12 th√°ng chi ti√™u.

4. **Breakdown chi ph√≠**:
   - Qu·ªπ kh·∫©n c·∫•p: 100% m·ª•c ti√™u
   - Du l·ªãch: 80% chi ph√≠ ch√≠nh, 20% d·ª± ph√≤ng
   - Mua s·∫Øm: 90% gi√° s·∫£n ph·∫©m, 10% d·ª± ph√≤ng
   - H·ªçc t·∫≠p: 85% h·ªçc ph√≠, 15% t√†i li·ªáu/d·ª± ph√≤ng

üìÑ Output JSON:
{
  "plans": [
    {
      "id": string,
      "name": string,
      "description": string,
      "target_amount": number,
      "current_amount": number,
      "monthly_contribution": number,
      "time_to_goal": number,
      "priority": "high" | "medium" | "low",
      "category": string,
      "breakdown": { [key: string]: number },
      "ai_analysis": {
        "feasibility_score": number,
        "risk_level": string,
        "recommendations": [{ type: string, title: string, description: string, impact: string, priority: string }],
        "milestones": [{ amount: number, timeframe: string, description: string }],
        "monthly_breakdown": { current_savings: number, optimized_savings: number, with_investment: number },
        "challenges": string[],
        "tips": string[]
      }
    }
  ]
}

V√≠ d·ª•:
C√¢u h·ªèi: "L·∫≠p k·∫ø ho·∫°ch ti·∫øt ki·ªám 10 tri·ªáu cho qu·ªπ kh·∫©n c·∫•p trong 1 nƒÉm"
Output: {
  "plans": [
    {
      "id": "plan_${Date.now()}_${Math.random().toString(36).slice(2)}",
      "name": "Qu·ªπ kh·∫©n c·∫•p",
      "description": "Ti·∫øt ki·ªám qu·ªπ kh·∫©n c·∫•p cho 6 th√°ng chi ti√™u",
      "target_amount": 10000000,
      "current_amount": ${currentAmountForNewPlan},
      "monthly_contribution": ${Math.min(financialData.monthly_surplus || 1000000, financialData.current_income * 0.2)},
      "time_to_goal": 12,
      "priority": "high",
      "category": "Qu·ªπ kh·∫©n c·∫•p",
      "breakdown": { "Qu·ªπ kh·∫©n c·∫•p": 10000000 },
      "ai_analysis": {
        "feasibility_score": ${Math.min(95, 95 - (financialData.monthly_surplus < 2000000 ? 5 : 0) - (financialData.expense_change_percentage > 15 ? 5 : 0) - (existingPlans.some(plan => plan.category === 'Qu·ªπ kh·∫©n c·∫•p') ? 10 : 0))},
        "risk_level": "${financialData.monthly_surplus < 1000000 || financialData.income_change_percentage < -15 ? 'high' : 'low'}",
        "recommendations": [
          {
            "type": "savings",
            "title": "Ti·∫øt ki·ªám c·ªë ƒë·ªãnh",
            "description": "Chuy·ªÉn t·ª± ƒë·ªông 1 tri·ªáu/th√°ng v√†o t√†i kho·∫£n ti·∫øt ki·ªám",
            "impact": "ƒê·∫°t m·ª•c ti√™u ƒë√∫ng h·∫°n",
            "priority": "high"
          },
          {
            "type": "expense",
            "title": "C·∫Øt gi·∫£m chi ti√™u",
            "description": "Gi·∫£m chi ti√™u ƒÉn u·ªëng t·ª´ 5 tri·ªáu xu·ªëng 4 tri·ªáu/th√°ng",
            "impact": "TƒÉng th·∫∑ng d∆∞ 1 tri·ªáu/th√°ng",
            "priority": "high"
          },
          ${financialData.monthly_surplus < 2000000 ? `
          {
            "type": "income",
            "title": "TƒÉng thu nh·∫≠p",
            "description": "T√¨m c√¥ng vi·ªác ph·ª• nh∆∞ giao h√†ng, b√°n h√†ng online",
            "impact": "TƒÉng th·∫∑ng d∆∞ 1-2 tri·ªáu/th√°ng",
            "priority": "medium"
          }` : ''}
        ].filter(Boolean),
        "milestones": [
          { "amount": 2500000, "timeframe": "3 th√°ng", "description": "ƒê·∫°t 25% m·ª•c ti√™u" },
          { "amount": 5000000, "timeframe": "6 th√°ng", "description": "ƒê·∫°t 50% m·ª•c ti√™u" },
          { "amount": 10000000, "timeframe": "12 th√°ng", "description": "Ho√†n th√†nh m·ª•c ti√™u" }
        ],
        "monthly_breakdown": {
          "current_savings": ${Math.min(financialData.monthly_surplus || 1000000, financialData.current_income * 0.2)},
          "optimized_savings": ${Math.min((financialData.monthly_surplus || 1000000) * 1.2, financialData.current_income * 0.25)},
          "with_investment": ${Math.min((financialData.monthly_surplus || 1000000) * 1.3, financialData.current_income * 0.3)}
        },
        "challenges": [
          "L·∫°m ph√°t 3.4-4.2% c√≥ th·ªÉ l√†m gi·∫£m gi√° tr·ªã ti·∫øt ki·ªám",
          ${financialData.monthly_surplus < 1000000 ? '"Th·∫∑ng d∆∞ h√†ng th√°ng th·∫•p, kh√≥ duy tr√¨ ti·∫øt ki·ªám",' : ''}
          ${Object.values(spendingByCategory).some(cat => cat.percentage > 40) ? `"Chi ti√™u ${Object.entries(spendingByCategory).find(([_, cat]) => cat.percentage > 40)?.[0]} chi·∫øm h∆°n 40% thu nh·∫≠p",` : ''}
          ${existingPlans.length > 1 ? '"Ph√¢n t√°n ngu·ªìn l·ª±c cho nhi·ªÅu k·∫ø ho·∫°ch",' : ''}
        ].filter(Boolean),
        "tips": [
          "Thi·∫øt l·∫≠p chuy·ªÉn kho·∫£n t·ª± ƒë·ªông 1 tri·ªáu/th√°ng",
          "Theo d√µi chi ti√™u h√†ng tu·∫ßn qua ·ª©ng d·ª•ng",
          ${financialData.expense_change_percentage > 15 ? '"C·∫Øt gi·∫£m chi ti√™u kh√¥ng c·∫ßn thi·∫øt nh∆∞ ƒÉn ngo√†i, gi·∫£i tr√≠",' : ''}
          "∆Øu ti√™n qu·ªπ kh·∫©n c·∫•p tr∆∞·ªõc c√°c m·ª•c ti√™u kh√°c"
        ].filter(Boolean)
      }
    }
  ]
}
`;
};