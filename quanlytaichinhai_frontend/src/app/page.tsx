"use client"

import { useState, useRef, useEffect } from "react"
import { Bot, User } from "lucide-react"

interface Message {
  id: string
  content: string
  role: "user" | "assistant"
  timestamp: Date
}

export default function ChatAI() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      content: "Xin ch√†o! T√¥i l√† AI h·ªó tr·ª£ t√†i ch√≠nh. H√£y h·ªèi t√¥i v·ªÅ: s·ªë d∆∞, chi ti√™u, ti·∫øt ki·ªám...",
      role: "assistant",
      timestamp: new Date(),
    },
  ])
  const [inputValue, setInputValue] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  // G·ªçi API AI (OpenAI ho·∫∑c local)
  const fetchAIResponse = async (userMessage: string): Promise<string> => {
  try {
    const response = await fetch("/api/ai", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ message: userMessage })
    })
    
    if (!response.ok) throw new Error("L·ªói API")
    const data = await response.json()
    return data.reply
  } catch (error) {
    console.error("L·ªói OpenAI:", error)
    return "Xin l·ªói, t√¥i ƒëang b·∫≠n. Vui l√≤ng th·ª≠ l·∫°i sau."
  }
}

  const handleSendMessage = async (message: string) => {
    if (!message.trim()) return

    // Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng
    const userMessage: Message = {
      id: Date.now().toString(),
      content: message,
      role: "user",
      timestamp: new Date(),
    }
    setMessages((prev) => [...prev, userMessage])
    setInputValue("")
    setIsLoading(true)
    // ‚è± Gi·∫£ l·∫≠p loading b·∫±ng setTimeout
  setTimeout(() => {
    const aiResponse = generateAIResponse(message)

    const aiMessage: Message = {
      id: (Date.now() + 1).toString(),
      content: aiResponse,
      role: "assistant",
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, aiMessage])
    setIsLoading(false)
  }, 1500) // ‚è± 1.5 gi√¢y loading

    // G·ªçi AI v√† nh·∫≠n ph·∫£n h·ªìi
    //const aiResponse = await fetchAIResponse(message)
     
  }

  const generateAIResponse = (userMessage: string): string => {
    const lowerMessage = userMessage.toLowerCase()

    if (lowerMessage.includes(" xem s·ªë d∆∞")) {
      return "S·ªë d∆∞ hi·ªán t·∫°i c·ªßa b·∫°n l√† 15.750.000 ‚Ç´. ƒê√¢y l√† m·ªôt m·ª©c s·ªë d∆∞ kh√° t·ªët! B·∫°n c√≥ mu·ªën t√¥i ph√¢n t√≠ch chi ti·∫øt v·ªÅ t√¨nh h√¨nh t√†i ch√≠nh kh√¥ng?"
    }

    if (lowerMessage.includes("chi ti√™u") || lowerMessage.includes("ti√™u")) {
      return "Th√°ng n√†y b·∫°n ƒë√£ chi ti√™u 4.200.000 ‚Ç´. C√°c kho·∫£n chi l·ªõn nh·∫•t l√†:\n\nüçî ƒÇn u·ªëng: 1.500.000 ‚Ç´\nüöó Di chuy·ªÉn: 900.000 ‚Ç´\nüéÆ Gi·∫£i tr√≠: 750.000 ‚Ç´\n\nB·∫°n c√≥ mu·ªën t√¥i ƒë∆∞a ra l·ªùi khuy√™n ƒë·ªÉ t·ªëi ∆∞u chi ti√™u kh√¥ng?"
    }

    if (lowerMessage.includes("thu nh·∫≠p") || lowerMessage.includes("l∆∞∆°ng")) {
      return "Thu nh·∫≠p th√°ng n√†y c·ªßa b·∫°n l√† 8.500.000 ‚Ç´. T·ª∑ l·ªá ti·∫øt ki·ªám hi·ªán t·∫°i l√† 50.6% - r·∫•t t·ªët! B·∫°n ƒëang qu·∫£n l√Ω t√†i ch√≠nh r·∫•t hi·ªáu qu·∫£."
    }

    if (lowerMessage.includes("l·ªùi khuy√™n") || lowerMessage.includes("khuy√™n")) {
      return "D·ª±a tr√™n ph√¢n t√≠ch t√†i ch√≠nh c·ªßa b·∫°n, t√¥i c√≥ m·ªôt s·ªë l·ªùi khuy√™n:\n\nüí° Ti·∫øp t·ª•c duy tr√¨ t·ª∑ l·ªá ti·∫øt ki·ªám cao\nüí° C√≥ th·ªÉ gi·∫£m chi ti√™u ƒÉn u·ªëng b·∫±ng c√°ch n·∫•u ƒÉn t·∫°i nh√†\nüí° Xem x√©t ƒë·∫ßu t∆∞ m·ªôt ph·∫ßn ti·ªÅn ti·∫øt ki·ªám\nüí° Thi·∫øt l·∫≠p qu·ªπ kh·∫©n c·∫•p 6 th√°ng chi ti√™u\n\nB·∫°n mu·ªën t√¥i gi·∫£i th√≠ch chi ti·∫øt v·ªÅ ƒëi·ªÉm n√†o?"
    }

    if (lowerMessage.includes("ƒë·∫ßu t∆∞")) {
      return "V·ªõi s·ªë d∆∞ hi·ªán t·∫°i v√† t·ª∑ l·ªá ti·∫øt ki·ªám t·ªët, b·∫°n c√≥ th·ªÉ xem x√©t:\n\nüìà Qu·ªπ ƒë·∫ßu t∆∞ c√¢n b·∫±ng (30-40%)\nüè¶ Ti·ªÅn g·ª≠i c√≥ k·ª≥ h·∫°n (20-30%)\nüè† B·∫•t ƒë·ªông s·∫£n (n·∫øu ƒë·ªß v·ªën)\nüí∞ V√†ng (5-10% ƒë·ªÉ ƒëa d·∫°ng h√≥a)\n\nL∆∞u √Ω: Ch·ªâ ƒë·∫ßu t∆∞ s·ªë ti·ªÅn b·∫°n c√≥ th·ªÉ ch·∫•p nh·∫≠n r·ªßi ro!"
    }

   if (lowerMessage.includes("s·ªë d∆∞") || lowerMessage.includes("ti·ªÅn")) {
    return "üí∞ S·ªë d∆∞ hi·ªán t·∫°i c·ªßa b·∫°n l√† 15.750.000 ‚Ç´. B·∫°n mu·ªën ph√¢n t√≠ch th√™m v·ªÅ chi ti√™u ho·∫∑c ti·∫øt ki·ªám kh√¥ng?";
  }

  if (lowerMessage.includes("chi ti√™u") || lowerMessage.includes("ti√™u")) {
    return "üìä B·∫°n ƒë√£ chi ti√™u 4.200.000 ‚Ç´ trong th√°ng n√†y.\n\n‚Ä¢ ƒÇn u·ªëng: 1.500.000 ‚Ç´\n‚Ä¢ Di chuy·ªÉn: 900.000 ‚Ç´\n‚Ä¢ Gi·∫£i tr√≠: 750.000 ‚Ç´\n\nB·∫°n mu·ªën t√¥i g·ª£i √Ω c√°ch c·∫Øt gi·∫£m kh√¥ng?";
  }

  if (lowerMessage.includes("thu nh·∫≠p") || lowerMessage.includes("l∆∞∆°ng")) {
    return "üìà Thu nh·∫≠p th√°ng n√†y l√† 8.500.000 ‚Ç´. T·ª∑ l·ªá ti·∫øt ki·ªám ƒë·∫°t 50.6% ‚Äì r·∫•t t·ªët!";
  }

  if (lowerMessage.includes("l·ªùi khuy√™n") || lowerMessage.includes("khuy√™n")) {
    return "üí° L·ªùi khuy√™n:\n‚Ä¢ Duy tr√¨ ti·∫øt ki·ªám ƒë·ªÅu m·ªói th√°ng\n‚Ä¢ N·∫•u ƒÉn t·∫°i nh√† ƒë·ªÉ gi·∫£m chi ti√™u\n‚Ä¢ T·∫°o qu·ªπ kh·∫©n c·∫•p\n‚Ä¢ ƒê·∫ßu t∆∞ an to√†n n·∫øu c√≥ th·ªÉ";
  }

  if (lowerMessage.includes("ƒë·∫ßu t∆∞")) {
    return "üìà G·ª£i √Ω ƒë·∫ßu t∆∞:\n‚Ä¢ Qu·ªπ ƒë·∫ßu t∆∞ c√¢n b·∫±ng (30-40%)\n‚Ä¢ G·ª≠i ti·∫øt ki·ªám k·ª≥ h·∫°n (20-30%)\n‚Ä¢ V√†ng ho·∫∑c b·∫•t ƒë·ªông s·∫£n n·∫øu c√≥ v·ªën\n\n‚ö†Ô∏è ƒê·ª´ng ƒë·∫ßu t∆∞ s·ªë ti·ªÅn b·∫°n kh√¥ng th·ªÉ m·∫•t.";
  }

  if (lowerMessage.includes("ti·∫øt ki·ªám") && lowerMessage.includes("50 tri·ªáu") && lowerMessage.includes("2 nƒÉm")) {
    return "üéØ B·∫°n mu·ªën ti·∫øt ki·ªám 50 tri·ªáu trong 2 nƒÉm. Vui l√≤ng nh·∫≠p l∆∞∆°ng h√†ng th√°ng c·ªßa b·∫°n ƒë·ªÉ t√¥i t√≠nh to√°n l·ªô tr√¨nh ti·∫øt ki·ªám.";
  }

  if (lowerMessage.includes("t√¥i c√≥ l∆∞∆°ng") || lowerMessage.includes("thu nh·∫≠p m·ªói th√°ng")) {
    return "üìå C·∫£m ∆°n b·∫°n! B·∫°n c√≥ ·ªü tr·ªç kh√¥ng? N·∫øu c√≥, cho bi·∫øt ti·ªÅn thu√™ m·ªói th√°ng nh√©.";
  }

  if (lowerMessage.includes("tr·ªç") && lowerMessage.includes("1 tri·ªáu")) {
    return "‚úÖ ƒê√£ ghi nh·∫≠n ti·ªÅn tr·ªç 1 tri·ªáu. B·∫°n c√≥ kho·∫£n chi c·ªë ƒë·ªãnh n√†o kh√°c m·ªói th√°ng kh√¥ng? (v√≠ d·ª•: ƒÉn u·ªëng, xƒÉng xe, gi·∫£i tr√≠...)";
  }

  return "ü§ñ T√¥i c√≥ th·ªÉ gi√∫p b·∫°n l·∫≠p k·∫ø ho·∫°ch ti·∫øt ki·ªám, ph√¢n t√≠ch chi ti√™u v√† ƒë∆∞a ra l·ªùi khuy√™n t√†i ch√≠nh.\n\nV√≠ d·ª•:\n‚Ä¢ \"T√¥i mu·ªën ti·∫øt ki·ªám 50 tri·ªáu trong 2 nƒÉm\"\n‚Ä¢ \"Xem th·ªëng k√™ chi ti√™u\"\n‚Ä¢ \"G·ª£i √Ω ƒë·∫ßu t∆∞ an to√†n\"\n\nB·∫°n mu·ªën b·∫Øt ƒë·∫ßu v·ªõi g√¨?";
    
  }

  const handleQuickAction = (action: string) => {
    handleSendMessage(action)
  }
  useEffect(() => {
    const pending = localStorage.getItem("pendingChatMessage");
    if (pending) {
      localStorage.removeItem("pendingChatMessage");
      setTimeout(() => {
        handleSendMessage(pending);
      }, 300); // ‚è± ch·ªù render xong r·ªìi m·ªõi g·ª≠i (m∆∞·ª£t)
    }
  }, []);

    

  // Expose the handleSendMessage function to the parent layout
  useEffect(() => {
    ;(window as any).sendChatMessage = handleSendMessage
    ;(window as any).setInputValue = setInputValue
    ;(window as any).inputValue = inputValue
  }, [inputValue])

  useEffect(() => {
    if (messages.length > 1) {
      messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    }
  }, [messages]);

  return (
    <div className="flex flex-col h-full">
      {/* Chat Messages */}
      <div className="flex-1 overflow-y-auto space-y-4 pb-4">
        {messages.map((message) => (
          <div key={message.id} className={`flex gap-3 ${message.role === "user" ? "justify-end" : "justify-start"}`}>
            {message.role === "assistant" && (
              <div className="flex-shrink-0 w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center">
                <Bot className="w-5 h-5 text-white" />
              </div>
            )}

            <div
              className={`max-w-[80%] rounded-2xl px-4 py-3 ${
                message.role === "user" ? "bg-blue-600 text-white" : "bg-zinc-800 text-white border border-zinc-700"
              }`}
            >
              <div className="whitespace-pre-wrap text-sm leading-relaxed">{message.content}</div>
              <div className={`text-xs mt-2 opacity-70 ${message.role === "user" ? "text-blue-100" : "text-zinc-400"}`}>
                {message.timestamp.toLocaleTimeString("vi-VN", {
                  hour: "2-digit",
                  minute: "2-digit",
                })}
              </div>
            </div>

            {message.role === "user" && (
              <div className="flex-shrink-0 w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
                <User className="w-5 h-5 text-white" />
              </div>
            )}
          </div> 
        ))}

        {isLoading && (
          <div className="flex gap-3 justify-start">
            <div className="flex-shrink-0 w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center">
              <Bot className="w-5 h-5 text-white" />
            </div>
            <div className="bg-zinc-800 border border-zinc-700 rounded-2xl px-4 py-3">
              <div className="flex space-x-1">
                <div className="w-2 h-2 bg-zinc-500 rounded-full animate-bounce"></div>
                <div
                  className="w-2 h-2 bg-zinc-500 rounded-full animate-bounce"
                  style={{ animationDelay: "0.1s" }}
                ></div>
                <div
                  className="w-2 h-2 bg-zinc-500 rounded-full animate-bounce"
                  style={{ animationDelay: "0.2s" }}
                ></div>
              </div>
            </div>
          </div>
        )}

        <div ref={messagesEndRef} />
      </div>

      {/* Quick Actions */}
      <div className="border-t border-zinc-800 pt-4 mb-4">
        <div className="flex flex-wrap gap-2">
            
          <button
            onClick={() => handleQuickAction("Xem s·ªë d∆∞ hi·ªán t·∫°i")}
            className="px-3 py-2 rounded-full bg-zinc-800 hover:bg-zinc-700 text-sm text-white flex items-center gap-2 transition-colors"
          >
            üü£ Xem s·ªë d∆∞
          </button>
          <button
            onClick={() => handleQuickAction("Th·ªëng k√™ chi ti√™u th√°ng n√†y")}
            className="px-3 py-2 rounded-full bg-zinc-800 hover:bg-zinc-700 text-sm text-white flex items-center gap-2 transition-colors"
          >
            üìä Th·ªëng k√™
          </button>
          <button
            onClick={() => handleQuickAction("ƒê∆∞a ra l·ªùi khuy√™n t√†i ch√≠nh")}
            className="px-3 py-2 rounded-full bg-zinc-800 hover:bg-zinc-700 text-sm text-white flex items-center gap-2 transition-colors"
          >
            üí° L·ªùi khuy√™n
          </button>
          <button
            onClick={() => handleQuickAction("G·ª£i √Ω ƒë·∫ßu t∆∞ ph√π h·ª£p")}
            className="px-3 py-2 rounded-full bg-zinc-800 hover:bg-zinc-700 text-sm text-white flex items-center gap-2 transition-colors"
          >
            üìà ƒê·∫ßu t∆∞
          </button>
          <button
            onClick={() => handleQuickAction("G·ª£i √Ω ƒë·∫ßu t∆∞ ph√π h·ª£p")}
            className="px-3 py-2 rounded-full bg-zinc-800 hover:bg-zinc-700 text-sm text-white flex items-center gap-2 transition-colors"
          >
            L·ªùi khuy√™n
          </button>
        </div>
      </div>
    </div>
  )
}
