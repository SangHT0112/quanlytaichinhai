"use client"

import { useState, useRef, useEffect } from "react"
import { Bot, User } from "lucide-react"
import { LoadingIndicator } from "@/components/LoadingIndicator"
import { MessageItem } from "@/components/MessageItem"
import QuickActions from "@/components/QuickActions"
interface Message {
  id: string
  content: string
  role: "user" | "assistant"
  timestamp: Date
}

export default function ChatAI() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      content: "Xin ch√†o! T√¥i l√† AI h·ªó tr·ª£ t√†i ch√≠nh. H√£y h·ªèi t√¥i v·ªÅ: s·ªë d∆∞, chi ti√™u, ti·∫øt ki·ªám...",
      role: "assistant",
      timestamp: new Date(),
    },
  ])
  const [inputValue, setInputValue] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  // G·ªçi API AI (OpenAI ho·∫∑c local)
//   const fetchAIResponse = async (userMessage: string): Promise<string> => {
//   try {
//     const response = await fetch("/api/ai", {
//       method: "POST",
//       headers: { "Content-Type": "application/json" },
//       body: JSON.stringify({ message: userMessage })
//     })
    
//     if (!response.ok) throw new Error("L·ªói API")
//     const data = await response.json()
//     return data.reply
//   } catch (error) {
//     console.error("L·ªói OpenAI:", error)
//     return "Xin l·ªói, t√¥i ƒëang b·∫≠n. Vui l√≤ng th·ª≠ l·∫°i sau."
//   }
// }

  const handleSendMessage = async (message: string) => {
    if (!message.trim()) return

    // Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng
    const userMessage: Message = {
      id: Date.now().toString(),
      content: message,
      role: "user",
      timestamp: new Date(),
    }
    setMessages((prev) => [...prev, userMessage])
    setInputValue("")
    setIsLoading(true)
    // Gi·∫£ l·∫≠p loading b·∫±ng setTimeout
    setTimeout(() => {
      const aiResponse = generateAIResponse(message)

      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: aiResponse,
        role: "assistant",
        timestamp: new Date(),
      }

      setMessages((prev) => [...prev, aiMessage])
      setIsLoading(false)
    }, 1500) //  1.5 gi√¢y loading

    // G·ªçi AI v√† nh·∫≠n ph·∫£n h·ªìi
    //const aiResponse = await fetchAIResponse(message)
     
  }

  const generateAIResponse = (userMessage: string): string => {
    const lowerMessage = userMessage.toLowerCase()
    // Danh s√°ch t·ª´ kh√≥a ƒëi·ªÅu h∆∞·ªõng (kh√¥ng ph√¢n bi·ªát v·ªã tr√≠ trong c√¢u)
    const NAV_TRIGGERS = [
      'ƒë·∫øn trang', 'v√†o trang','qua trang',
      'ƒë∆∞a t√¥i ƒë·∫øn', 'ƒë∆∞a t√¥i t·ªõi', 'ƒëi t·ªõi', 'ƒëi ƒë·∫øn',
      't√¥i mu·ªën v√†o', 'm·ªü trang', 'chuy·ªÉn t·ªõi', 'chuy·ªÉn ƒë·∫øn',
      'nh·∫£y t·ªõi', 'hi·ªÉn th·ªã trang'
    ];

    // Ki·ªÉm tra c√≥ ph·∫£i l√† y√™u c·∫ßu ƒëi·ªÅu h∆∞·ªõng kh√¥ng
    const isNavigationRequest = NAV_TRIGGERS.some(trigger => 
      lowerMessage.includes(trigger)
    );

    

    // ======================= X·ª≠ l√Ω y√™u c·∫ßu ƒëi·ªÅu h∆∞·ªõng ==========================
    if (isNavigationRequest) {

      // 1.L·ªãch s·ª≠ giao d·ªãch
      if (/l·ªãch s·ª≠|giao d·ªãch g·∫ßn ƒë√¢y|history/i.test(lowerMessage)) {
        window.postMessage({
          type: 'NAVIGATE',
          payload: { path: '/history', target: 'transactions-history' }
        }, '*');
        return "üìú ƒêang t·∫£i l·ªãch s·ª≠ giao d·ªãch...";
      }

      // 2. Th·ªëng k√™
      if (/th·ªëng k√™|b√°o c√°o|analytics|stats/i.test(lowerMessage)) {
        window.postMessage({
          type: 'NAVIGATE',
          payload: { path: '/thongke', target: 'stats-section' }
        }, '*');
        return "üìà ƒêang m·ªü b√°o c√°o th·ªëng k√™...";
      }
    }
    // X·ª≠ l√Ω t√¨m ki·∫øm
     // X·ª≠ l√Ω t√¨m ki·∫øm v·ªõi regex ƒë·ªìng b·ªô v·ªõi aiFilterHelper
    const searchMatch = userMessage.match(/(?:t√¨m ki·∫øm|t√¨m|search)\s*(?:giao d·ªãch|transaction)?\s*(.+)/i);
    if (searchMatch) {
      const rawKeyword = searchMatch[1].trim();
      const cleanedKeyword = rawKeyword
        .replace(/giao d·ªãch|transaction/gi, '')
        .trim();
      
      if (cleanedKeyword) {
        window.postMessage({
          type: 'SEARCH',
          payload: { keyword: cleanedKeyword }
        }, '*');
        
        if (!window.location.pathname.includes('/history')) {
          return `üîç ƒêang chuy·ªÉn ƒë·∫øn trang l·ªãch s·ª≠ ƒë·ªÉ t√¨m ki·∫øm "${cleanedKeyword}"...`;
        }
        return `üîé ƒêang t√¨m ki·∫øm "${cleanedKeyword}"...`;
      }
      return "Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm. V√≠ d·ª•: \"T√¨m ki·∫øm Starbucks\"";
    }


    //===========================D√ôNG FILTER ƒê·ªÇ L·ªåC==============================================================
          //L·ªçc chi ti√™u ho·∫∑c giao d·ªãch
    if (/l·ªãch s·ª≠ chi ti√™u|giao d·ªãch chi ti√™u|l·ªçc chi ti√™u|xem chi ti√™u|ti·ªÅn ra|mua s·∫Øm|thanh to√°n/i.test(lowerMessage)) {
      window.postMessage({
        type: 'FILTER',
        payload: {
          message: 'l·ªçc lo·∫°i giao d·ªãch chi ti√™u' // ho·∫∑c: 'filter type=expense'
        }
      }, '*')

      if (!window.location.pathname.includes('/history')) {
        return "üí∏ ƒêang chuy·ªÉn ƒë·∫øn trang l·ªãch s·ª≠ giao d·ªãch chi ti√™u...";
      }

      return "üîç ƒêang l·ªçc c√°c giao d·ªãch chi ti√™u...";
    }
    // ===================X·ª≠ l√Ω y√™u c·∫ßu l·ªçc l·ªãch s·ª≠ theo category=======================
    if (/l·ªãch s·ª≠ ƒÉn u·ªëng|giao d·ªãch ƒÉn u·ªëng|chi ti√™u ƒÉn u·ªëng|ƒë·ªì ƒÉn|th·ª©c ƒÉn/i.test(lowerMessage)) {
      // G·ª≠i message ƒë·∫øn trang history ƒë·ªÉ √°p d·ª•ng filter
      window.postMessage({
        type: 'FILTER',
        payload: {
          message: 'filter category=ƒÇn u·ªëng' // ƒê·∫£m b·∫£o kh·ªõp v·ªõi category trong database
        }
      }, '*');

      // N·∫øu ƒëang ·ªü trang kh√°c, th√¥ng b√°o s·∫Ω chuy·ªÉn trang
      if (!window.location.pathname.includes('/history')) {
        return "üçî ƒêang chuy·ªÉn ƒë·∫øn trang l·ªãch s·ª≠ v·ªõi c√°c giao d·ªãch ƒÉn u·ªëng...";
      }
      
      return "üçΩÔ∏è ƒêang l·ªçc c√°c giao d·ªãch ƒÉn u·ªëng...";
    }


    // ===================X·ª≠ l√Ω y√™u c·∫ßu l·ªçc l·ªãch s·ª≠ theo th√°ng=======================
      const matchMonth = lowerMessage.match(/th√°ng\s*(\d{1,2})/);
      if (matchMonth) {
        const rawMonth = matchMonth[1];
        const month = rawMonth.padStart(2, '0'); // "6" ‚Üí "06", "11" ‚Üí "11"

        // G·ª≠i message ƒë·∫øn trang history
        window.postMessage({
          type: 'FILTER',
          payload: {
            message: `l·ªçc giao d·ªãch th√°ng ${parseInt(month)}`
          }
        }, '*');

        if (!window.location.pathname.includes('/history')) {
          return `üóìÔ∏è ƒêang chuy·ªÉn ƒë·∫øn l·ªãch s·ª≠ giao d·ªãch th√°ng ${parseInt(month)}...`;
        }

        return `üîé ƒêang l·ªçc c√°c giao d·ªãch trong th√°ng ${parseInt(month)}...`;
      }

      



    // ===============X·ª≠ l√Ω h·ªèi ƒë√°p th√¥ng th∆∞·ªùng (kh√¥ng ch·ª©a t·ª´ kh√≥a ƒëi·ªÅu h∆∞·ªõng =======================
    if (/s·ªë d∆∞|balance/i.test(lowerMessage)) {
      return "üí∞ S·ªë d∆∞ hi·ªán t·∫°i c·ªßa b·∫°n l√† 15.750.000 ‚Ç´";
    }

    if (/chi ti√™u|spending/i.test(lowerMessage)) {
      return "üí∏ Th√°ng n√†y b·∫°n ƒë√£ chi ti√™u 4.200.000 ‚Ç´";
    }
    if (lowerMessage.includes(" xem s·ªë d∆∞")) {
      return "S·ªë d∆∞ hi·ªán t·∫°i c·ªßa b·∫°n l√† 15.750.000 ‚Ç´. ƒê√¢y l√† m·ªôt m·ª©c s·ªë d∆∞ kh√° t·ªët! B·∫°n c√≥ mu·ªën t√¥i ph√¢n t√≠ch chi ti·∫øt v·ªÅ t√¨nh h√¨nh t√†i ch√≠nh kh√¥ng?"
    }

    if (lowerMessage.includes("chi ti√™u") || lowerMessage.includes("ti√™u")) {
      return "Th√°ng n√†y b·∫°n ƒë√£ chi ti√™u 4.200.000 ‚Ç´. C√°c kho·∫£n chi l·ªõn nh·∫•t l√†:\n\nüçî ƒÇn u·ªëng: 1.500.000 ‚Ç´\nüöó Di chuy·ªÉn: 900.000 ‚Ç´\nüéÆ Gi·∫£i tr√≠: 750.000 ‚Ç´\n\nB·∫°n c√≥ mu·ªën t√¥i ƒë∆∞a ra l·ªùi khuy√™n ƒë·ªÉ t·ªëi ∆∞u chi ti√™u kh√¥ng?"
    }

    if (lowerMessage.includes("thu nh·∫≠p") || lowerMessage.includes("l∆∞∆°ng")) {
      return "Thu nh·∫≠p th√°ng n√†y c·ªßa b·∫°n l√† 8.500.000 ‚Ç´. T·ª∑ l·ªá ti·∫øt ki·ªám hi·ªán t·∫°i l√† 50.6% - r·∫•t t·ªët! B·∫°n ƒëang qu·∫£n l√Ω t√†i ch√≠nh r·∫•t hi·ªáu qu·∫£."
    }

    if (lowerMessage.includes("l·ªùi khuy√™n") || lowerMessage.includes("khuy√™n")) {
      return "D·ª±a tr√™n ph√¢n t√≠ch t√†i ch√≠nh c·ªßa b·∫°n, t√¥i c√≥ m·ªôt s·ªë l·ªùi khuy√™n:\n\nüí° Ti·∫øp t·ª•c duy tr√¨ t·ª∑ l·ªá ti·∫øt ki·ªám cao\nüí° C√≥ th·ªÉ gi·∫£m chi ti√™u ƒÉn u·ªëng b·∫±ng c√°ch n·∫•u ƒÉn t·∫°i nh√†\nüí° Xem x√©t ƒë·∫ßu t∆∞ m·ªôt ph·∫ßn ti·ªÅn ti·∫øt ki·ªám\nüí° Thi·∫øt l·∫≠p qu·ªπ kh·∫©n c·∫•p 6 th√°ng chi ti√™u\n\nB·∫°n mu·ªën t√¥i gi·∫£i th√≠ch chi ti·∫øt v·ªÅ ƒëi·ªÉm n√†o?"
    }



  return "ü§ñ T√¥i c√≥ th·ªÉ gi√∫p b·∫°n l·∫≠p k·∫ø ho·∫°ch ti·∫øt ki·ªám, ph√¢n t√≠ch chi ti√™u v√† ƒë∆∞a ra l·ªùi khuy√™n t√†i ch√≠nh.\n\nV√≠ d·ª•:\n‚Ä¢ \"T√¥i mu·ªën ti·∫øt ki·ªám 50 tri·ªáu trong 2 nƒÉm\"\n‚Ä¢ \"Xem th·ªëng k√™ chi ti√™u\"\n‚Ä¢ \"G·ª£i √Ω ƒë·∫ßu t∆∞ an to√†n\"\n\nB·∫°n mu·ªën b·∫Øt ƒë·∫ßu v·ªõi g√¨?";
    
  }

  const handleQuickAction = (action: string) => {
    handleSendMessage(action)
  }
  //Date = ng√†y hi·ªán t·∫°i th√¨ l∆∞u c√≤n ng∆∞·ª£c l·∫°i th√¨ x√≥a
  useEffect(() => {
    const stored = localStorage.getItem("chatHistory")
    if (stored) {
      const { date, messages: savedMessages } = JSON.parse(stored)
      const today = new Date().toDateString()
      if (date === today) {
        // Convert l·∫°i timestamp t·ª´ string ‚Üí Date
        const restoredMessages = savedMessages.map((m: any) => ({
          ...m,
          timestamp: new Date(m.timestamp),
        }))
        setMessages(restoredMessages)
      } else {
        localStorage.removeItem("chatHistory")
      }
    }
  }, [])

  //D√πng khi m·ªôt h√†nh ƒë·ªông ·ªü trang kh√°c y√™u c·∫ßu chat bot tr·∫£ l·ªùi
  useEffect(() => {
    const pending = localStorage.getItem("pendingChatMessage");
    if (pending) {
      localStorage.removeItem("pendingChatMessage");
      setTimeout(() => {
        handleSendMessage(pending);
      }, 300); // ‚è± ch·ªù render xong r·ªìi m·ªõi g·ª≠i (m∆∞·ª£t)
    }
  }, []);

    

  // Cho ph√©p c√°c th√†nh ph·∫ßn kh√°c trong ·ª©ng d·ª•ng truy c·∫≠p ch√∫ng t·ª´ ngo√†i component ChatAI
  useEffect(() => {
    ;(window as any).sendChatMessage = handleSendMessage
    ;(window as any).setInputValue = setInputValue
    ;(window as any).inputValue = inputValue
  }, [inputValue])

  useEffect(() => {
    if (messages.length > 1) {
      localStorage.setItem("chatHistory", JSON.stringify({
        date: new Date().toDateString(),
        messages
      }))
    }
  }, [messages])
  useEffect(() => {
    const timeout = setTimeout(() => {
      if (messagesEndRef.current) {
        messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
      }
    }, 50) // tr√¨ ho√£n 50ms cho n·ªôi dung render xong

    return () => clearTimeout(timeout)
  }, [messages])



  return (
    <div className="flex flex-col h-full">
      {/* Chat Messages */}
      <div className="flex-1 overflow-y-auto space-y-4 pb-4">
        {messages.map((message) => (
          <MessageItem key={message.id} message={message} />
        ))}

        {isLoading && <LoadingIndicator />}

        <div ref={messagesEndRef} />
      </div>

      <QuickActions onAction={handleQuickAction} />
    </div>
  )
}


